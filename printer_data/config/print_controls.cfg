#####################################################################
#   Filament sensor
#####################################################################

[filament_switch_sensor switch_sensor]
switch_pin: ^PC3
pause_on_runout: False ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
runout_gcode:
    PAUSE # [pause_resume] is required in printer.cfg
    RESPOND MSG="Filament switch runout"
    SET_DISPLAY_TEXT MSG="Filament switch runout"              # Displays info
    M117 Filament switch runout
insert_gcode:
    RESPOND MSG="Filament switch inserted"
    SET_DISPLAY_TEXT MSG="Filament switch inserted"              # Displays info
    M117 Filament switch inserted
    
[filament_motion_sensor encoder_sensor]
switch_pin: PC0
detection_length: 3.75 #2.88 is max sensitivity; larger values less sensitive
extruder: extruder
pause_on_runout: False ; This can be set to false to debug false positives putting the sensor in "monitor mode". The printer will not pause but it will run the runout_gcode below.
runout_gcode:
    PAUSE # [pause_resume] is required in printer.cfg
    RESPOND MSG="Filament encoder runout"
    SET_DISPLAY_TEXT MSG="Filament encoder runout"              # Displays info
    M117 Filament encoder runout
insert_gcode:
    RESPOND MSG="Filament encoder inserted"
    SET_DISPLAY_TEXT MSG="Filament encoder inserted"              # Displays info
    M117 Filament encoder inserted

[delayed_gcode DISABLE_FILAMENT_SENSOR_DELAYED]
initial_duration: 2
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[delayed_gcode ENABLE_FILAMENT_SENSOR_DELAYED]
initial_duration: 10
gcode:
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1 #enable filament sensor
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1 #enable filament sensor

[gcode_macro _SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M117 ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

[gcode_macro _SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor
gcode:
    M117 DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

#####################################################################
#####################################################################
#   Print Start
#####################################################################
#####################################################################

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################
    
## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)
## Beacon Contact logic (if you have one. 4 lines at 4 locations)
    
[gcode_macro PRINT_START]
gcode:
    # Enable Filament Sensor after a delay
    DISABLE_FILAMENT_SENSOR_DELAYED
    ENABLE_FILAMENT_SENSOR_DELAYED
    _SFS_ENABLE


    # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("45")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    
    ##  Uncomment for Beacon Contact (1 of 4 for beacon contact)
    #SET_GCODE_OFFSET Z=0                                 # Set offset to 0
    
    # Home the printer, set absolute positioning and update the Stealthburner LEDs.
    STATUS_HOMING                                         # Set LEDs to homing-mode
    G28                                                   # Full home (XYZ)
    G90                                                   # Absolute position
    
    ##  Uncomment for bed mesh (1 of 2 for bed mesh)
    BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)
    
    # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan
    
    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore
    
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp
    
    # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
    {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
    {% endif %}
    
    # Heat hotend to 150c. This helps with getting a correct Z-home.
    SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
    M109 S150                                             # Heat hotend to 150c
    
    ##  Uncomment for Beacon contact (2 of 4 for beacon contact)
    #G28 Z METHOD=CONTACT CALIBRATE=1                     # Calibrate z offset and beacon model
    
    ##  Uncomment for Trident (Z_TILT_ADJUST)
    #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
    #STATUS_LEVELING                                      # Set LEDs to leveling-mode
    #Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
    #G28 Z                                                # Home Z again after Z_TILT_ADJUST
    
    ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
    SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
    STATUS_LEVELING                                      # Set LEDs to leveling-mode
    QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
    G28 Z                                                # Home Z again after QGL
    
    ##  Uncomment for bed mesh (2 of 2 for bed mesh)
    SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
    STATUS_MESHING                                       # Set LEDs to bed mesh-mode
    BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh
    
    ## Uncomment for Beacon Contact (3 of 4 for beacon contact)
    #G28 Z METHOD=CONTACT CALIBRATE=0                     # Calibrate z offset only with hot nozzle
    
    # Heat up the hotend up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
    STATUS_HEATING                                        # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
    M107                                                  # Turn off partcooling fan
    M109 S{target_extruder}                               # Heat the hotend to set temp
    
    ##   Uncomment for Beacon Contact (4 of 4 for beacon contact)
    #SET_GCODE_OFFSET Z=0.06                              # Add a little offset for hotend thermal expansion
    
    # Get ready to print by doing a primeline and updating the LEDs
    SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
    STATUS_PRINTING                                       # Set LEDs to printing-mode
    G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
    G0 Z0.4                                               # Raise Z to 0.4
    G91                                                   # Incremental positioning
    G1 X100 E20 F1000                                     # Primeline
    G90                                                   # Absolute position


#####################################################################
#####################################################################
#   Print Pause
#####################################################################
#####################################################################

[gcode_macro PAUSE]
#From: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
rename_existing: BASE_PAUSE
gcode:
   # Parameters
   {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
   
   {% if printer['pause_resume'].is_paused|int == 0 %}
   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
   
   #SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0                                    ; disable filament switch sensor
   _SFS_DISABLE                                                                          ; disable SFS v2.0 filament sensor
   SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
   BASE_PAUSE                                                                           ; pause print
   {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
   G91                                                                              ; relative positioning
   G1 Z{z} F900                                                                     ; raise Z up by z hop amount
   {% else %}
   { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
   {% endif %}
   G90                                                                                  ; absolute positioning
   G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
   SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
   M104 S0                                                                              ; turn off hotend
   SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
   {% endif %}

# [gcode_macro PAUSE]
# #From: mainsail.cfg
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# gcode:
#   ##### get user parameters or use default ##### 
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
#   {% set idle_timeout = client.idle_timeout|default(0) %}
#   {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
#   {% set restore = False if printer.toolhead.extruder == ''
#               else True  if params.RESTORE|default(1)|int == 1 else False %}
#   ##### end of definitions #####
#   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
#   # set a new idle_timeout value
#   {% if idle_timeout > 0 %}
#     SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
#     SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
#   {% endif %}
#   PAUSE_BASE
#   {client.user_pause_macro|default("")}
#   _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}


# # Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
# [gcode_macro SET_PAUSE_NEXT_LAYER]
# #From: mainsail.cfg
# description: Enable a pause if the next layer is reached
# gcode:
#   {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
#   {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
#   {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"


# # Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
# [gcode_macro SET_PAUSE_AT_LAYER]
# #From: mainsail.cfg
# description: Enable/disable a pause if a given layer number is reached
# gcode:
#   {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
#   {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
#              else params.LAYER is defined %}
#   {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
#   {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
#   SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

#####################################################################
#####################################################################
#   Print Resume
#####################################################################
#####################################################################

[gcode_macro RESUME]
#From: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
   # Parameters
   {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
   
   {% if printer['pause_resume'].is_paused|int == 1 %}
   #SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1                            ; enable filament switch sensor
   DISABLE_FILAMENT_SENSOR_DELAYED
   ENABLE_FILAMENT_SENSOR_DELAYED
   _SFS_ENABLE                                                                       ; enable SFS v2.0 filament sensor
   #INITIAL_RGB                                                                    ; reset LCD color
   SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
   {% if etemp > 0 %}
   M109 S{etemp|int}                                                        ; wait for hotend to heat back up
   {% endif %}
   RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
   G91                                                                          ; relative positioning
   M83                                                                          ; relative extruder positioning
   {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
   G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
   {% else %}
   G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
   {% endif %}
   RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
   BASE_RESUME                                                                  ; resume print
   {% endif %}

# [gcode_macro RESUME]
# #From: mainsail.cfg
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# variable_last_extruder_temp: {'restore': False, 'temp': 0}
# variable_restore_idle_timeout: 0
# variable_idle_state: False
# gcode:
#   ##### get user parameters or use default #####
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
#   {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
#   {% set sp_move = client.speed_move|default(velocity) %}
#   {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
#                     else True if not printer[client.runout_sensor].enabled  # sensor is disabled
#                     else printer[client.runout_sensor].filament_detected %} # sensor status
#   {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
#                   else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
#   {% set do_resume = False %}
#   {% set prompt_txt = [] %}
#   ##### end of definitions #####
#   #### Printer comming from timeout idle state ####
#   {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
#     SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
#     {% if last_extruder_temp.restore %}
#       # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
#       RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
#       M109 S{last_extruder_temp.temp}
#       {% set do_resume = True %}
#     {% elif can_extrude %}
#       {% set do_resume = True %}
#     {% else %} 
#       RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
#       {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
#     {% endif %}
#   #### Printer comming out of regular PAUSE state ####
#   {% elif can_extrude %}
#     {% set do_resume = True %}
#   {% else %}
#     RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
#     {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
#   {% endif %}
#   {% if runout_resume %}
#     {% if do_resume %}
#       {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
#       {client.user_resume_macro|default("")}
#       _CLIENT_EXTRUDE
#       RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
#     {% endif %}
#   {% else %}
#     RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
#     {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
#   {% endif %}
#   ##### Generate User Information box in case of abort #####
#   {% if not (runout_resume and do_resume) %} 
#     RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
#     {% for element in prompt_txt %}
#       RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
#     {% endfor %}
#     RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
#     RESPOND TYPE=command MSG="action:prompt_show"
#   {% endif %}

#####################################################################
#####################################################################
#   Print Cancel
#####################################################################
#####################################################################

[gcode_macro CANCEL_PRINT]
#From: https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/pause_resume_filament.html
rename_existing: BASE_CANCEL_PRINT
gcode:
    _SFS_DISABLE
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


# [gcode_macro CANCEL_PRINT]
# #From: mailsail.cfg
# description: Cancel the actual running print
# rename_existing: CANCEL_PRINT_BASE
# gcode:
#   ##### get user parameters or use default #####
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
#   {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
#   {% set retract = client.cancel_retract|default(5.0)|abs %}
#   ##### define park position #####
#   {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
#             else "X=" ~ client.park_at_cancel_x %}
#   {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
#             else "Y=" ~ client.park_at_cancel_y %}
#   {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
#   ##### end of definitions #####
#   # restore idle_timeout time if needed
#   {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
#     SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
#   {% endif %}
#   {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
#   _CLIENT_RETRACT LENGTH={retract}
#   TURN_OFF_HEATERS
#   M106 S0
#   {client.user_cancel_macro|default("")}
#   SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
#   # clear pause_next_layer and pause_at_layer as preparation for next print
#   SET_PAUSE_NEXT_LAYER ENABLE=0
#   SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
#   CANCEL_PRINT_BASE

#####################################################################
#####################################################################
#   Print End
#####################################################################
#####################################################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # Disable Filament Sensor
    _SFS_DISABLE
    
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    #SET_PIN PIN=nevermore VALUE=0
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END